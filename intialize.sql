
-- create trigger to update timestamps
CREATE OR REPLACE FUNCTION moddatetime()
RETURNS TRIGGER AS $$
BEGIN
  NEW.modified_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- TODO: https://www.sisense.com/blog/better-sql-schema/

create table boards (
  id uuid default gen_random_uuid() primary key not null,
  created_at not null timestamp with time zone default as now(),
  modified_at not null timestamp with time zone default as now(),
  name text
);
create trigger boards_modified_at_tg before update on boards for each row execute procedure moddatetime();

create table board_color (
  id uuid primary key default gen_random_uuid() not null,
  color text not null,
  count int default 1,
  board_id uuid not null, constraint board_color_board_id_fk foreign key (board_id) references boards(id) on delete cascade
);

create table tasks (
  id uuid default gen_random_uuid() not null primary key,
  created_at timestamp with time zone default as now() not null,
  modified_at timestamp with time zone default as now() not null,
  board_id uuid not null, constraint task_board_id_fk foreign key (board_id) references boards(id) on delete cascade,
  title text,
  content text,
  color text,
);
create trigger tasks_modified_at_tg before update on tasks for each row execute procedure moddatetime();


create table tags (
  id uuid default gen_random_uuid() not null primary key,
  created_at timestamp with time zone default now() not null,
  modified_at timestamp with time zone default now() not null,
  board_id uuid not null, constraint tag_board_id_fk foreign key (board_id) references boards(id) on delete cascade,
  name text,
  description text,
  color text
);
create trigger tags_modified_at_tg before update on tags for each row execute procedure moddatetime();


-- task tag join table
create table task_tag (
  task_id uuid not null, constraint task_tag_task_id_fk foreign key (task_id) references tasks(id) on delete cascade,
  tag_id uuid not null, constraint task_tag_tag_id_fk foreign key (tag_id) references tags(id) on delete cascade,
  board_id uuid not null, constraint  task_tag_board_id_fk foreign key (board_id) references boards(id) on delete cascade,

  constraint pk_task_tag primary key (task_id, tag_id),
  id bigint generated by default as identity
);



create table users (
  id uuid default gen_random_uuid() not null primary key,
  created_at timestamp with time zone default now() not null,
  modified_at timestamp with time zone default now() not null,
  name text not null,
  email text not null unique,
  magic_link text unique
);
create trigger users_modified_at_tg before update on users for each row execute procedure moddatetime();


-- owner -- given to person that created board -- can be moved (only allow 1)
-- editor -- full edit access -- can add / remove access except owner
-- viewer -- can only view board

create type user_board_permission as ENUM ('owner', 'editor', 'viewer');

-- user board join table
create table user_board (
  id uuid default gen_random_uuid() primary key not null,
  created_at timestamp with time zone default now() not null,
  user_id uuid not null, constraint user_board_user_id_fk foreign key (user_id) references users(id) on delete cascade,
  board_id uuid not null, constraint user_board_board_id_fk foreign key (board_id) references boards(id) on delete cascade,
  permission user_board_permission not null
);

